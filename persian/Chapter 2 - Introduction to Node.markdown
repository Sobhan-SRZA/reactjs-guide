# فصل ۲: آشنایی با Node.js

## مقدمه
در این فصل، با **Node.js** آشنا می‌شویم، یک محیط اجرایی که به شما امکان می‌دهد جاوااسکریپت را خارج از مرورگر اجرا کنید. این ابزار برای توسعه‌دهندگان ری‌اکت بسیار مهم است، زیرا ابزارهای ساخت و مدیریت پروژه‌های ری‌اکت (مانند Create React App) به Node.js وابسته هستند. هدف این فصل، یادگیری مفاهیم پایه Node.js، نصب آن، و کار با ماژول‌ها و پکیج‌ها است.

## Node.js چیست و چرا مهم است؟
Node.js یک محیط اجرایی سمت سرور است که بر پایه موتور V8 گوگل کروم ساخته شده است. این ابزار به شما امکان می‌دهد:
- کدهای جاوااسکریپت را در محیط‌های غیرمرورگری اجرا کنید.
- اپلیکیشن‌های وب، APIها، و ابزارهای خط فرمان بسازید.
- از اکوسیستم غنی پکیج‌های npm برای مدیریت وابستگی‌ها استفاده کنید.

برای توسعه ری‌اکت، Node.js به همراه **npm** (مدیر بسته Node) برای نصب کتابخانه‌ها و اجرای اسکریپت‌ها ضروری است.

## نصب و راه‌اندازی Node.js و npm
### نصب Node.js
1. به وب‌سایت رسمی [Node.js](https://nodejs.org) بروید.
2. نسخه LTS (پایدار) را دانلود و نصب کنید.
3. برای بررسی نصب، در ترمینال دستورات زیر را اجرا کنید:
```bash
node --version
npm --version
```
این دستورات نسخه‌های نصب‌شده Node.js و npm را نمایش می‌دهند.

### راه‌اندازی یک پروژه ساده
1. یک پوشه برای پروژه خود بسازید:
```bash
mkdir my-node-project
cd my-node-project
```
2. پروژه را با npm مقداردهی کنید:
```bash
npm init -y
```
این دستور فایل `package.json` را ایجاد می‌کند که تنظیمات پروژه را ذخیره می‌کند.

## کار با ماژول‌ها و پکیج‌ها
Node.js از سیستم ماژولار استفاده می‌کند. ماژول‌ها به دو دسته تقسیم می‌شوند:
- **ماژول‌های داخلی**: مانند `fs` (برای کار با فایل‌ها) و `http` (برای سرورها).
- **ماژول‌های خارجی**: پکیج‌هایی که از npm نصب می‌کنید.

### مثال: استفاده از ماژول داخلی `fs`
```javascript
const fs = require("fs");

// نوشتن در یک فایل
fs.writeFileSync("example.txt", "سلام، این یک فایل آزمایشی است!");

// خواندن از فایل
const content = fs.readFileSync("example.txt", "utf8");
console.log(content); // خروجی: سلام، این یک فایل آزمایشی است!
```

### نصب و استفاده از پکیج خارجی
برای مثال، پکیج `lodash` را نصب و استفاده می‌کنیم:
1. نصب پکیج:
```bash
npm install lodash
```
2. استفاده در کد:
```javascript
const _ = require("lodash");

const numbers = [1, 2, 3, 4];
const shuffled = _.shuffle(numbers);
console.log(shuffled); // خروجی: آرایه‌ای تصادفی، مثلاً [3, 1, 4, 2]
```

## پروژه‌های ساده با Node.js
### پروژه ۱: ساخت یک سرور ساده
با ماژول `http` می‌توانید یک سرور وب ساده بسازید:
```javascript
const http = require("http");

const server = http.createServer((req, res) => {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("سلام از سرور Node.js!");
});

server.listen(3000, () => {
  console.log("سرور در http://localhost:3000 اجرا می‌شود");
});
```
1. کد را در فایل `server.js` ذخیره کنید.
2. اجرا کنید:
```bash
node server.js
```
3. در مرورگر به `http://localhost:3000` بروید تا پیام نمایش داده شود.

### پروژه ۲: یک ابزار خط فرمان
یک اسکریپت ساده برای محاسبه فاکتوریل:
```javascript
const num = parseInt(process.argv[2]);

function factorial(n) {
  if (n <= 1) return 1;
  return n * factorial(n - 1);
}

console.log(`فاکتوریل ${num} برابر است با: ${factorial(num)}`);
```
1. کد را در فایل `factorial.js` ذخیره کنید.
2. اجرا کنید:
```bash
node factorial.js 5
```
خروجی: `فاکتوریل 5 برابر است با: 120`

## تمرین‌های عملی
1. **تمرین ۱**: یک فایل متنی بسازید و با استفاده از ماژول `fs`، یک پیام به آن بنویسید و سپس آن را بخوانید.
2. **تمرین ۲**: پکیج `moment` را نصب کنید و تاریخ و ساعت فعلی را در فرمت‌های مختلف نمایش دهید.
3. **تمرین ۳**: یک سرور ساده با `http` بسازید که برای مسیر `/about` پیامی متفاوت نمایش دهد.
4. **تمرین ۴**: یک اسکریپت خط فرمان بنویسید که یک رشته را از ورودی بگیرد و آن را برعکس کند.

## نتیجه‌گیری
در این فصل، با Node.js، نصب آن، و کار با ماژول‌ها و پکیج‌ها آشنا شدیم. این ابزار پایه‌ای برای توسعه پروژه‌های ری‌اکت است. در فصل بعدی، به سراغ **TypeScript** می‌رویم تا با تایپ‌های استاتیک و مزایای آن برای توسعه ری‌اکت آشنا شویم.