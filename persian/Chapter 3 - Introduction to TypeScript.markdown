# فصل ۳: مقدمه‌ای بر TypeScript

## مقدمه
در این فصل، با **TypeScript** آشنا می‌شویم، یک سوپرست از جاوااسکریپت که قابلیت‌های تایپ استاتیک را به آن اضافه می‌کند. TypeScript به شما کمک می‌کند کدهایی با خطای کمتر و قابل‌نگهداری‌تر بنویسید، که این ویژگی‌ها به‌ویژه در پروژه‌های بزرگ مثل اپلیکیشن‌های ری‌اکت بسیار مفید هستند. هدف این فصل، یادگیری مفاهیم پایه TypeScript و آماده‌سازی شما برای استفاده از آن در پروژه‌های ری‌اکت است.

## TypeScript چیست و چرا از آن استفاده می‌کنیم؟
TypeScript یک زبان برنامه‌نویسی متن‌باز است که توسط مایکروسافت توسعه یافته و بر پایه جاوااسکریپت ساخته شده است. ویژگی‌های کلیدی آن عبارتند از:
- **تایپ استاتیک**: مشخص کردن نوع داده‌ها (مثل عدد، رشته، و غیره) برای جلوگیری از خطاهای رایج.
- **ابزارهای بهتر**: پشتیبانی قوی‌تر از ویرایشگرهای کد (مثل VS Code) برای تکمیل خودکار و تشخیص خطا.
- **سازگاری با جاوااسکریپت**: هر کد جاوااسکریپت معتبر، در TypeScript نیز معتبر است.

TypeScript در پروژه‌های ری‌اکت به شما کمک می‌کند تا کامپوننت‌ها و props را با اطمینان بیشتری مدیریت کنید.

## نصب و راه‌اندازی TypeScript
1. ابتدا مطمئن شوید **Node.js** نصب شده است (فصل دوم را ببینید).
2. TypeScript را به‌صورت سراسری نصب کنید:
```bash
npm install -g typescript
```
3. برای بررسی نصب، دستور زیر را اجرا کنید:
```bash
tsc --version
```
4. یک پروژه ساده بسازید:
```bash
mkdir my-typescript-project
cd my-typescript-project
npm init -y
npm install typescript --save-dev
```
5. فایل تنظیمات TypeScript را ایجاد کنید:
```bash
npx tsc --init
```
این دستور فایل `tsconfig.json` را ایجاد می‌کند که تنظیمات کامپایلر TypeScript را مشخص می‌کند.

## انواع داده‌ها، اینترفیس‌ها و تایپ‌ها
### انواع داده‌های پایه
TypeScript از انواع داده‌های جاوااسکریپت پشتیبانی می‌کند و تایپ‌های اضافی ارائه می‌دهد:
```typescript
let name: string = "علی"; // رشته
let age: number = 25; // عدد
let isStudent: boolean = true; // بولین
let hobbies: string[] = ["خواندن", "ورزش"]; // آرایه رشته‌ها
let anything: any = 42; // نوع any (اجتناب کنید مگر در موارد خاص)
```

### اینترفیس‌ها (Interfaces)
اینترفیس‌ها برای تعریف ساختار اشیاء استفاده می‌شوند:
```typescript
interface Person {
  name: string;
  age: number;
  isStudent?: boolean; // اختیاری
}

const person: Person = {
  name: "سارا",
  age: 20
};

function greet(person: Person) {
  return `سلام، ${person.name}! سن: ${person.age}`;
}
console.log(greet(person)); // خروجی: سلام، سارا! سن: 20
```

### تایپ‌ها (Types)
برای تعریف انواع سفارشی از `type` استفاده می‌کنیم:
```typescript
type ID = string | number; // Union Type
let userId: ID = "abc123"; // یا عدد
```

## استفاده از TypeScript در پروژه‌های جاوااسکریپت
می‌توانید TypeScript را به‌تدریج به پروژه‌های جاوااسکریپت اضافه کنید. برای مثال، یک فایل جاوااسکریپت را به TypeScript تبدیل کنید:
1. فایل `script.js` را به `script.ts` تغییر نام دهید.
2. تایپ‌ها را اضافه کنید:
```typescript
// قبل (جاوااسکریپت)
function add(a, b) {
  return a + b;
}

// بعد (تایپ‌اسکریپت)
function add(a: number, b: number): number {
  return a + b;
}
```
3. فایل را کامپایل کنید:
```bash
tsc script.ts
```
این دستور فایل `script.js` را تولید می‌کند که در مرورگر یا Node.js قابل‌اجرا است.

### مثال: کار با DOM
TypeScript برای کار با DOM تایپ‌های خاصی ارائه می‌دهد:
```typescript
const button = document.querySelector("#myButton") as HTMLButtonElement;
button.addEventListener("click", () => {
  button.textContent = "کلیک شد!";
});
```

## تمرین‌های عملی
1. **تمرین ۱**: یک اینترفیس `Book` تعریف کنید که شامل عنوان (رشته)، نویسنده (رشته)، و سال انتشار (عدد) باشد. سپس یک شیء از این نوع بسازید.
2. **تمرین ۲**: تابعی بنویسید که یک آرایه از اعداد بگیرد و میانگین آن‌ها را برگرداند (با تایپ‌های مناسب).
3. **تمرین ۳**: یک فایل HTML بسازید با یک دکمه و یک پاراگراف. با TypeScript، کدی بنویسید که با کلیک روی دکمه، متن پاراگراف تغییر کند.
4. **تمرین ۴**: یک نوع `union` برای متغیر `status` تعریف کنید که فقط مقادیر `"active"`، `"inactive"` یا `"pending"` را قبول کند.

## نتیجه‌گیری
در این فصل، با مفاهیم پایه TypeScript، نصب و راه‌اندازی آن، و استفاده از تایپ‌ها و اینترفیس‌ها آشنا شدیم. TypeScript به ما کمک می‌کند کدهایی قابل‌اعتمادتر بنویسیم که در پروژه‌های ری‌اکت بسیار مفید خواهد بود. در فصل بعدی، وارد دنیای **React JS** با TypeScript می‌شویم و اولین پروژه خود را می‌سازیم.