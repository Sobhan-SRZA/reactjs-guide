# فصل ۴: شروع کار با React JS و TypeScript

## مقدمه
در این فصل، وارد دنیای **React JS** می‌شویم و یاد می‌گیریم چگونه با استفاده از **TypeScript** پروژه‌های ری‌اکت بسازیم. این فصل بر مفاهیم اصلی ری‌اکت مانند کامپوننت‌ها، Props، و State تمرکز دارد و شما را برای ایجاد یک اپلیکیشن ساده آماده می‌کند. با ترکیب TypeScript، کدهای ما خواناتر و قابل‌نگهداری‌تر خواهند بود.

## React JS چیست؟
**React JS** یک کتابخانه جاوااسکریپت متن‌باز است که توسط فیسبوک توسعه یافته و برای ساخت رابط‌های کاربری (UI) تعاملی و تک‌صفحه‌ای (SPA) استفاده می‌شود. ویژگی‌های کلیدی آن:
- **کامپوننت‌محور**: رابط کاربری به بخش‌های کوچک و قابل‌استفاده مجدد (کامپوننت‌ها) تقسیم می‌شود.
- **Virtual DOM**: برای بهینه‌سازی رندر و افزایش سرعت.
- **یک‌جهته بودن داده‌ها**: جریان داده‌ها از والد به فرزند ساده و قابل‌پیش‌بینی است.

TypeScript در ری‌اکت به ما کمک می‌کند تا props و state را با تایپ‌های مشخص تعریف کنیم و از خطاهای زمان اجرا جلوگیری کنیم.

## نصب و راه‌اندازی پروژه React با TypeScript
برای شروع یک پروژه ری‌اکت با TypeScript، از ابزار **Create React App** استفاده می‌کنیم:
1. در ترمینال، دستور زیر را اجرا کنید:
```bash
npx create-react-app my-react-app --template typescript
```
2. به پوشه پروژه بروید و آن را اجرا کنید:
```bash
cd my-react-app
npm start
```
3. مرورگر شما به‌طور خودکار `http://localhost:3000` را باز می‌کند و یک صفحه پیش‌فرض ری‌اکت نمایش داده می‌شود.

### ساختار پروژه
پس از ایجاد پروژه، ساختار پوشه‌ها به این صورت خواهد بود:
```
my-react-app/
  ├── src/
  │   ├── App.tsx          # کامپوننت اصلی
  │   ├── index.tsx        # نقطه ورود اپلیکیشن
  │   ├── App.css          # استایل‌ها
  │   └── ...              # سایر فایل‌ها
  ├── public/
  ├── package.json         # وابستگی‌ها و اسکریپت‌ها
  └── tsconfig.json        # تنظیمات TypeScript
```

## مفاهیم اصلی React
### کامپوننت‌ها
کامپوننت‌ها بلوک‌های سازنده رابط کاربری در ری‌اکت هستند. می‌توانند به‌صورت تابع یا کلاس تعریف شوند. ما از **کامپوننت‌های تابعی** استفاده می‌کنیم، زیرا مدرن‌تر و ساده‌تر هستند.

مثال: یک کامپوننت ساده با TypeScript:
```typescript
import React from 'react';

const Greeting: React.FC = () => {
  return <h1>سلام، به ری‌اکت خوش آمدید!</h1>;
};

export default Greeting;
```

### Props
Props (مخفف Properties) برای انتقال داده از کامپوننت والد به فرزند استفاده می‌شوند. با TypeScript، می‌توانیم نوع Props را مشخص کنیم:
```typescript
interface GreetingProps {
  name: string;
}

const Greeting: React.FC<GreetingProps> = ({ name }) => {
  return <h1>سلام، {name}!</h1>;
};

export default Greeting;
```
استفاده در کامپوننت دیگر:
```typescript
import Greeting from './Greeting';

const App: React.FC = () => {
  return <Greeting name="علی" />;
};
```

### State
State برای مدیریت داده‌های داخلی و پویای یک کامپوننت استفاده می‌شود. با هوک `useState` می‌توانیم state را در کامپوننت‌های تابعی مدیریت کنیم:
```typescript
import React, { useState } from 'react';

const Counter: React.FC = () => {
  const [count, setCount] = useState<number>(0);

  return (
    <div>
      <p>شمارنده: {count}</p>
      <button onClick={() => setCount(count + 1)}>اضافه کن</button>
    </div>
  );
};

export default Counter;
```

## ساختار پروژه React
برای سازمان‌دهی پروژه، پیشنهاد می‌شود ساختار زیر را دنبال کنید:
```
src/
  ├── components/       # کامپوننت‌های قابل‌استفاده مجدد
  ├── pages/           # کامپوننت‌های سطح صفحه
  ├── styles/          # فایل‌های CSS یا استایل‌های دیگر
  ├── types/           # تعریف تایپ‌ها و اینترفیس‌های TypeScript
  └── App.tsx          # کامپوننت اصلی
```

مثال: تعریف یک تایپ در `types/index.ts`:
```typescript
export interface User {
  id: number;
  name: string;
}
```

## تمرین‌های عملی
1. **تمرین ۱**: یک کامپوننت `Welcome` بسازید که یک prop به نام `message` (رشته) بگیرد و آن را در یک تگ `<p>` نمایش دهد.
2. **تمرین ۲**: یک کامپوننت `TodoList` بسازید که یک آرایه از رشته‌ها به‌عنوان prop دریافت کند و آن‌ها را به‌صورت لیست (`<ul>`) نمایش دهد.
3. **تمرین ۳**: یک کامپوننت `Counter` بسازید که با دو دکمه برای افزایش و کاهش یک عدد کار کند. از `useState` و TypeScript استفاده کنید.
4. **تمرین ۴**: یک پروژه جدید با Create React App و TypeScript بسازید و یک کامپوننت ساده به `App.tsx` اضافه کنید که نام شما را نمایش دهد.

## نتیجه‌گیری
در این فصل، با مفاهیم اصلی React JS و نحوه استفاده از TypeScript در پروژه‌های ری‌اکت آشنا شدیم. همچنین اولین پروژه خود را راه‌اندازی کردیم و با کامپوننت‌ها، Props، و State کار کردیم. در فصل بعدی، به سراغ **مدیریت State** در ری‌اکت می‌رویم و با هوک‌های پیشرفته‌تر و Context API آشنا می‌شویم.